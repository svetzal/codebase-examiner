[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "codebase-examiner"
version = "0.1.0"
description = "A tool to examine Python codebases and generate documentation"
authors = [
    { name = "Author", email = "author@example.com" }
]
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "structlog>=23.1.0",
    "pydantic>=2.0.0",
    "typer>=0.9.0", # For CLI interface
    "rich>=13.3.0", # For rich terminal output
    "anthropic>=0.2.0", # For MCP server capabilities
    "mojentic",
    "mojentic-mcp>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-mock>=3.14.0",
    "pytest-cov",
    "flake8>=7.2.0",
    "flake8-pyproject",  # Allow flake8 to read from pyproject.toml
    "mkdocs",
    "mkdocstrings[python]",
    "griffe-fieldz",
    "mkdocs-material",
    "pymdown-extensions",
]

[project.scripts]
codebase-examiner = "codebase_examiner.cli:app"
codebase-examiner-stdio = "codebase_examiner.mcp_stdio:start_server"

[tool.setuptools]
package-dir = { "" = "src" }

[tool.pytest.ini_options]
# Use Python unittest-style test discovery
python_files = "*_spec.py"
python_classes = "Describe*"
python_functions = "it_should_*"
# No specific testpaths as tests are alongside implementation files

[tool.flake8]
max-line-length = 100
exclude = [".venv", "build", "*.egg"]
